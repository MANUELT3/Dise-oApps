import * as React from 'react';
import { ModalProps } from 'react-native';
import { WebViewProps } from 'react-native-webview';

declare enum GoogleRecaptchaTheme {
    DARK = "dark",
    LIGHT = "light"
}
declare enum GoogleRecaptchaSize {
    NORMAL = "normal",
    COMPACT = "compact",
    INVISIBLE = "invisible"
}
declare enum GoogleRecaptchaActionName {
    LOGIN = "LOGIN",
    PASSWORD_RESET = "PASSWORD_RESET",
    ADD_TO_CART = "ADD_TO_CART",
    CHECKOUT = "CHECKOUT",
    GET_PRICE = "GET_PRICE",
    PLAY_SONG = "PLAY_SONG"
}
declare const DEFAULT_GSTATIC_DOMAIN = "www.gstatic.com";
declare const DEFAULT_RECAPTCHA_DOMAIN = "www.google.com";

type GoogleRecaptchaToken = string | null | undefined

interface GoogleRecaptchaBaseProps {
  /**
   * reCAPTCHA language code.
   * @default en
   * @see https://developers.google.com/recaptcha/docs/language
   */
  lang?: string

  /**
   * reCAPTCHA your siteKey.
   * @see https://developers.google.com/recaptcha/intro#recaptcha-overview
   */
  siteKey: string

  /**
   * The size of the widget.
   * @default normal
   * @see https://developers.google.com/recaptcha/docs/display#render_param
   * @see https://developers.google.com/recaptcha/docs/invisible#render_param
   */
  size?: GoogleRecaptchaSize

  /**
   * The color theme of the widget.
   * @default light
   * @see https://developers.google.com/recaptcha/docs/faq#can-i-customize-the-recaptcha-widget-or-badge
   */
  theme?: GoogleRecaptchaTheme

  /**
   * An additional parameter for specifying the action name associated with the protected element for reCAPTCHA Enterprise API.
   * @default ''
   * @see https://cloud.google.com/recaptcha-enterprise/docs/actions
   */
  action?: GoogleRecaptchaActionName | string

  /**
   * When size = 'invisible', you are allowed to hide the badge as long as you include the reCAPTCHA branding visibly in the user flow.
   * @default false
   * @see https://developers.google.com/recaptcha/docs/faq#id-like-to-hide-the-recaptcha-badge.-what-is-allowed
   */
  hideBadge?: boolean

  /**
   * Use the reCAPTCHA Enterprise API.
   * @default false
   * @see https://cloud.google.com/recaptcha-enterprise/docs/using-features
   */
  enterprise?: boolean

  /**
   * Customize reCAPTCHA gstatic host.
   * @default www.gstatic.com
   */
  gstaticDomain?: string

  /**
   * The host name of the reCAPTCHA valid api.
   * @default www.google.com
   * @see https://developers.google.com/recaptcha/docs/faq#can-i-use-recaptcha-globally
   */
  recaptchaDomain?: string
}

interface GoogleRecaptchaRefAttributes {
    /**
     * Open modal.
     */
    open(): void;
    /**
     * Close modal.
     */
    close(): void;
    /**
     * Receive the reCaptcha response async.
     * @see GoogleRecaptchaProps.onVerify
     */
    getToken(): Promise<GoogleRecaptchaToken>;
}
interface GoogleRecaptchaProps extends GoogleRecaptchaBaseProps {
    /**
     * The URL (domain) configured in the reCAPTCHA setup.
     * @example http(s)://domain.com
     */
    baseUrl: string;
    /**
     * A callback function, executed when the reCAPTCHA is ready to use.
     */
    onLoad?(): void;
    /**
     * A callback function, executed when the user submits a successful response. The reCAPTCHA response token is passed to your callback.
     * @see GoogleRecaptchaRefAttributes.getToken
     */
    onVerify?(token: GoogleRecaptchaToken): void;
    /**
     * A callback function, executed when reCAPTCHA encounters an error (usually network connectivity) and cannot continue until connectivity is restored. If you specify a function here, you are responsible for informing the user that they should retry.
     */
    onError?(error: unknown): void;
    /**
     * A callback function, executed when the Modal is closed.
     */
    onClose?(): void;
    /**
     * A callback function, executed when the reCAPTCHA response expires and the user needs to re-verify. Only works if the webview still open after onVerify has been called for a long time.
     */
    onExpire?(): void;
    /**
     * Close the Modal when it expires.
     * @default false
     * @see GoogleRecaptchaProps.onExpire
     */
    closeOnExpire?: boolean;
    /**
     * Override the Modal props.
     */
    modalProps?: Partial<Omit<ModalProps, 'visible' | 'onRequestClose'>>;
    /**
     * 	Override the WebView props.
     */
    webViewProps?: Partial<Omit<WebViewProps, 'source' | 'onMessage' | 'onNavigationStateChange' | 'onShouldStartLoadWithRequest'>>;
    /**
     * A component to render on top of Modal.
     */
    headerComponent?: React.ReactNode;
    /**
     * A component to render on bottom of Modal.
     */
    footerComponent?: React.ReactNode;
    /**
     * A custom loading component.
     */
    loadingComponent?: React.ReactNode;
}
declare const GoogleRecaptcha: React.ForwardRefExoticComponent<GoogleRecaptchaProps & React.RefAttributes<GoogleRecaptchaRefAttributes>>;

export { DEFAULT_GSTATIC_DOMAIN, DEFAULT_RECAPTCHA_DOMAIN, GoogleRecaptchaActionName, GoogleRecaptchaBaseProps, GoogleRecaptchaProps, GoogleRecaptchaRefAttributes, GoogleRecaptchaSize, GoogleRecaptchaTheme, GoogleRecaptchaToken, GoogleRecaptcha as default };
